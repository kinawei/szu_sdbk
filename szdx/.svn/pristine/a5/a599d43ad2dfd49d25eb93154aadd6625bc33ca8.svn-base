<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  
  <meta http-equiv="X-UA-Compatible" content="IE=edge" >
  <title>ECMAScript6 学习笔记 | Jason&#39;s Blog</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="description" content="接触 ES6 也有段时间了，最先的感觉可能是模块化、箭头函数这些的，慢慢也觉得是应该认真的看一看 ES6 本身，在学习的过程中，也就有了这篇文章。实际上很多前端的博客都有 ES6 讲解了，所以这篇文章更重要的是提醒我自己关于一些 ES6 的知识点，而不是完整的学习 ES6，所以如果你想要完整的学习 ES6，建议移步阮一峰的 ECMAScript 6 入门。">
<meta property="og:type" content="article">
<meta property="og:title" content="ECMAScript6 学习笔记">
<meta property="og:url" content="http://ijason.cc/2016/08/09/es6-note/index.html">
<meta property="og:site_name" content="Jason's Blog">
<meta property="og:description" content="接触 ES6 也有段时间了，最先的感觉可能是模块化、箭头函数这些的，慢慢也觉得是应该认真的看一看 ES6 本身，在学习的过程中，也就有了这篇文章。实际上很多前端的博客都有 ES6 讲解了，所以这篇文章更重要的是提醒我自己关于一些 ES6 的知识点，而不是完整的学习 ES6，所以如果你想要完整的学习 ES6，建议移步阮一峰的 ECMAScript 6 入门。">
<meta property="og:updated_time" content="2016-08-21T07:18:29.000Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="ECMAScript6 学习笔记">
<meta name="twitter:description" content="接触 ES6 也有段时间了，最先的感觉可能是模块化、箭头函数这些的，慢慢也觉得是应该认真的看一看 ES6 本身，在学习的过程中，也就有了这篇文章。实际上很多前端的博客都有 ES6 讲解了，所以这篇文章更重要的是提醒我自己关于一些 ES6 的知识点，而不是完整的学习 ES6，所以如果你想要完整的学习 ES6，建议移步阮一峰的 ECMAScript 6 入门。">
  
    <link rel="alternative" href="/atom.xml" title="Jason&#39;s Blog" type="application/atom+xml">
  
  
    <link rel="icon" href="/favicon.png">
  
  <link rel="stylesheet" href="/css/style.css">
</head>

<body>
  <div id="container">
    <div class="left-col">
    <div class="overlay">
	<code>
		<br /><br /><br />
		if (heyJason == 'visible') { <br />
			&nbsp;&nbsp;&nbsp;&nbsp;console.log('Hey Guys!') <br />
		}
	</code>
</div>
<div class="intrude-less">
	<header id="header" class="inner">
		<a href="/" class="profilepic">
			
			<img lazy-src="http://sdkx.qiniudn.com/res/lovercjy.jpg" class="js-avatar">
			
		</a>

		<hgroup>
		  <h1 class="header-author"><a href="/">Jason Chen</a></h1>
		</hgroup>

		
		<p class="header-subtitle">一个半桶水前端的博客</p>
		

		
			<div class="switch-btn">
				<div class="icon">
					<div class="icon-ctn">
						<div class="icon-wrap icon-house" data-idx="0">
							<div class="birdhouse"></div>
							<div class="birdhouse_holes"></div>
						</div>
						<div class="icon-wrap icon-ribbon hide" data-idx="1">
							<div class="ribbon"></div>
						</div>
						
						
						<div class="icon-wrap icon-me hide" data-idx="3">
							<div class="user"></div>
							<div class="shoulder"></div>
						</div>
						
					</div>
					
				</div>
				<div class="tips-box hide">
					<div class="tips-arrow"></div>
					<ul class="tips-inner">
						<li>Menu</li>
						<li>Tags</li>
						
						
						<li>About</li>
						
					</ul>
				</div>
			</div>
		

		<div class="switch-area">
			<div class="switch-wrap">
				<section class="switch-part switch-part1">
					<nav class="header-menu">
						<ul>
						
							<li><a href="/">主页</a></li>
				        
							<li><a href="/archives">所有文章</a></li>
				        
						</ul>
					</nav>
					<nav class="header-nav">
						<div class="social">
							
								<a class="github" target="_blank" href="https://github.com/jas0ncn" title="github">github</a>
					        
								<a class="weibo" target="_blank" href="http://weibo.com/138604948" title="weibo">weibo</a>
					        
								<a class="zhihu" target="_blank" href="https://www.zhihu.com/people/innojason" title="zhihu">zhihu</a>
					        
								<a class="mail" target="_blank" href="/jason@iszu.cn" title="mail">mail</a>
					        
						</div>
					</nav>
				</section>
				
				
				<section class="switch-part switch-part2">
					<div class="widget tagcloud" id="js-tagcloud">
						<a href="/tags/csst/" style="font-size: 10px;">csst</a> <a href="/tags/gulp/" style="font-size: 10px;">gulp</a> <a href="/tags/javascript/" style="font-size: 13.33px;">javascript</a> <a href="/tags/js/" style="font-size: 20px;">js</a> <a href="/tags/jsonp/" style="font-size: 10px;">jsonp</a> <a href="/tags/tengine/" style="font-size: 10px;">tengine</a> <a href="/tags/ubuntu/" style="font-size: 10px;">ubuntu</a> <a href="/tags/vue/" style="font-size: 10px;">vue</a> <a href="/tags/全栈/" style="font-size: 10px;">全栈</a> <a href="/tags/前端/" style="font-size: 16.67px;">前端</a> <a href="/tags/后端/" style="font-size: 10px;">后端</a> <a href="/tags/深大快讯/" style="font-size: 10px;">深大快讯</a> <a href="/tags/腾讯云/" style="font-size: 10px;">腾讯云</a>
					</div>
				</section>
				
				
				

				
				
				<section class="switch-part switch-part3">
				
					<div id="js-aboutme">前端，索狗，谷粉，设计师，啥都懂一点，偶尔写写后端的大二狗。励志要进T的半桶水前端！</div>
				</section>
				
			</div>
		</div>
	</header>				
</div>

    </div>
    <div class="mid-col">
      <nav id="mobile-nav">
  	<div class="overlay">
  		<div class="slider-trigger"></div>
  		<h1 class="header-author js-mobile-header hide">Jason Chen</h1>
  	</div>
	<div class="intrude-less">
		<header id="header" class="inner">
			<div class="profilepic">
			
				<img lazy-src="http://sdkx.qiniudn.com/res/lovercjy.jpg" class="js-avatar">
			
			</div>
			<hgroup>
			  <h1 class="header-author">Jason Chen</h1>
			</hgroup>
			
			<p class="header-subtitle">一个半桶水前端的博客</p>
			
			<nav class="header-menu">
				<ul>
				
					<li><a href="/">主页</a></li>
		        
					<li><a href="/archives">所有文章</a></li>
		        
		        <div class="clearfix"></div>
				</ul>
			</nav>
			<nav class="header-nav">
				<div class="social">
					
						<a class="github" target="_blank" href="https://github.com/jas0ncn" title="github">github</a>
			        
						<a class="weibo" target="_blank" href="http://weibo.com/138604948" title="weibo">weibo</a>
			        
						<a class="zhihu" target="_blank" href="https://www.zhihu.com/people/innojason" title="zhihu">zhihu</a>
			        
						<a class="mail" target="_blank" href="/jason@iszu.cn" title="mail">mail</a>
			        
				</div>
			</nav>
		</header>				
	</div>
</nav>

      <div class="body-wrap"><article id="post-es6-note" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2016/08/09/es6-note/" class="article-date">
  	<time datetime="2016-08-09T06:39:59.000Z" itemprop="datePublished">2016-08-09</time>
</a>
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      ECMAScript6 学习笔记
    </h1>
  

      </header>
      
      <div class="article-info article-info-post">
        
	<div class="article-tag tagcloud">
		<ul class="article-tag-list"><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/javascript/">javascript</a></li><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/js/">js</a></li><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/前端/">前端</a></li></ul>
	</div>

        

        <div class="clearfix"></div>
      </div>
      
    
    <div class="article-entry" itemprop="articleBody">
      
        <blockquote>
<p>接触 ES6 也有段时间了，最先的感觉可能是模块化、箭头函数这些的，慢慢也觉得是应该认真的看一看 ES6 本身，在学习的过程中，也就有了这篇文章。实际上很多前端的博客都有 ES6 讲解了，所以这篇文章更重要的是提醒我自己关于一些 ES6 的知识点，而不是完整的学习 ES6，所以如果你想要完整的学习 ES6，建议移步阮一峰的 <a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a>。</p>
</blockquote>
<a id="more"></a>
<h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a><code>let</code> 和 <code>const</code></h2><p>ES6 新增了这两个关键字，两个关键字的精髓也就在于作用域。ES6增加了块级作用域：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>大部分的 ES6 学习教程都会重点介绍这个，学习的也比较透彻。就不做过多笔记。</p>
<p><strong>其实更重要的还是 <code>let</code> 和 <code>const</code> 到底有什么差别？</strong></p>
<p>对于 <code>const</code> 的理解，对我来说可能是在学习 C 语言，C++ 的时候的感受，constant 的简写。但是由于 JavaScript 语言的特殊性，<code>const</code> 关键字似乎并不是我们普通理解的常量。</p>
<p>MDN 关于 <code>const</code> 关键字的文档有一句话：</p>
<blockquote>
<p>The const declaration creates a read-only reference to a value. <strong>It does not mean the value it holds is immutable, just that the variable identifier cannot be reassigned.</strong></p>
</blockquote>
<p>加黑的这句话意思就是 “这并不代表常量指向的值是不可改变的，只是常量不能被重新赋值”。也就是说，<code>const</code> 定义的 <code>Object</code>，在定义之后仍可以修改其属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    bar: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line">a.bar = <span class="number">321</span></span><br><span class="line"></span><br><span class="line">a.bar <span class="comment">// 321</span></span><br></pre></td></tr></table></figure>
<p>所以，在大部分情况下，我们应该使用 <code>const</code> 定义 “大部分” 中间变量，在块级作用域内使用 <code>let</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><p>阮一峰的教程中说，解构表达式中，等号右边的值，要么转为对象以后要具备 Iterator 接口，要么本身就具备 Iterator 接口。这样的表达式才是合法的。Iterator 接口听的很多了，迭代器期初是在 Python 中了解到的，后来发现 JavaScript 里也有。</p>
<p>能使用解构赋值的具有 Iterator 接口的值有很多，甚至可以通过函数自己实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通解构</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义 Iterator 接口</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> a;</span><br><span class="line">        [a, b] = [b, a + b];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [first, second, third, fourth, fifth, sixth] = fibs();</span><br><span class="line">sixth <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>也可以用来快速交换两个变量的值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">[a, b] = [b, a]</span><br><span class="line"></span><br><span class="line">a <span class="comment">// 2</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><p>ES6 出现字符串模板我觉得应该是来的迟了，毕竟 Python 和 PHP 都已经有了一些类似字符串模板的字符串使用方法了。但是深入了解之后发现 ES6 的字符串模板还是比其他的吊一点的。</p>
<p>常见用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">20</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Jason is <span class="subst">$&#123;age&#125;</span> years old.`</span>) <span class="comment">// Jason is 20 years old.</span></span><br></pre></td></tr></table></figure>
<p>还有更加深入的用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jason = &#123;</span><br><span class="line">  name: <span class="string">'Jason'</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`</span><br><span class="line">  My name is <span class="subst">$&#123;jason.name&#125;</span>,</span><br><span class="line">  and I'm <span class="subst">$&#123;jason.age&#125;</span> years old.</span><br><span class="line">`</span>)</span><br><span class="line"><span class="comment">//  My name is Jason,</span></span><br><span class="line"><span class="comment">//  and I'm 20 years old.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`I'm <span class="subst">$&#123;jason.age + 1&#125;</span> years old next year.`</span>) <span class="comment">// I'm 21 years old next year.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'llo Wor'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`He<span class="subst">$&#123;fn()&#125;</span>ld.`</span>) <span class="comment">// Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写多行的 HTML</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;p&gt;name: <span class="subst">$&#123;jason.name&#125;</span>&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;age: <span class="subst">$&#123;jason.age&#125;</span>&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`</span>)</span><br><span class="line"><span class="comment">// &lt;div&gt;</span></span><br><span class="line"><span class="comment">//   &lt;p&gt;name: Jason&lt;/p&gt;</span></span><br><span class="line"><span class="comment">//   &lt;p&gt;age: 20&lt;/p&gt;</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Number-一些扩展"><a href="#Number-一些扩展" class="headerlink" title="Number 一些扩展"></a>Number 一些扩展</h2><p>二进制和八进制的新写法，分别用前缀<code>0b</code>（<code>0B</code>）和<code>0o</code>（<code>0O</code>）表示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b111110111</span> === <span class="number">503</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">0o767</span> === <span class="number">503</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>ES6 中将许多全局的方法移植到了原生 Number 对象方法，逐步减少全局性方法。虽然原来的写法可以用，但是我们还是尽量注意<strong>不要</strong>使用全局对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原有写法</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'12.34'</span>) <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'123.45#'</span>) <span class="comment">// 123.45</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="number">25</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="built_in">Number</span>.parseInt(<span class="string">'12.34'</span>) <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">Number</span>.parseFloat(<span class="string">'123.45#'</span>) <span class="comment">// 123.45</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="number">25</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>但是需要注意的是，<code>isFinite</code> 和 <code>isNaN</code> 在 Number 对象上调用和在全局调用的区别是：</p>
<blockquote>
<p>传统方法先调用 <code>Number()</code> 将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效，非数值一律返回 <code>false</code> <em>—— 阮一峰 ECMAScript 6 入门</em></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isFinite</span>(<span class="number">25</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="string">"25"</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="number">25</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="string">"25"</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">"NaN"</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">"NaN"</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a><code>Array.from()</code></h2><p>ES6 中对数组进行了许多扩展，其实我觉得最有用的就是 <code>Array.from()</code> ，以前我们要把一个类数组的对象（比如 function 的 <code>arguments</code> ）转换为对象，要借用 Array 的 <code>slice</code> 属性，而在 ES6 中，不需要了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)</span><br><span class="line">[].slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 中</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Array-find-和-Array-findIndex"><a href="#Array-find-和-Array-findIndex" class="headerlink" title="Array.find() 和 Array.findIndex()"></a><code>Array.find()</code> 和 <code>Array.findIndex()</code></h2><p>ES6 对数组还有两个很有用的属性，可以找出数组中符合回调函数的值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find((n) =&gt; n &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// -5</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>ES6 可以说对函数进行了一些十分有用，但着实晚了一点，比如，函数的默认值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a, b = 2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;a&#125;</span> + <span class="subst">$&#123;b&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>) <span class="comment">// 1 + 2</span></span><br></pre></td></tr></table></figure>
<p>还可以用解构赋默认值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">&#123; a = 0, b = 2 &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;a&#125;</span> + <span class="subst">$&#123;b&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn(&#123; a: <span class="number">1</span> &#125;) <span class="comment">// 1 + 2</span></span><br></pre></td></tr></table></figure>
<p>另外，ES6 还引入了箭头函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = v =&gt; v</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，箭头函数没有 <code>this</code> 上下文，所以你在箭头函数里使用 <code>this</code> 是父级对象的 <code>this</code> ：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  c: () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.b() <span class="comment">// Object a</span></span><br><span class="line">a.c() <span class="comment">// Window (如果在严格模式下，会报错)</span></span><br></pre></td></tr></table></figure>
<p>也就是说，你不能使用 <code>.call</code> 来指定函数上下文：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = &#123;</span><br><span class="line">  d: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.b.call(c) <span class="comment">// Object &#123;d: 1&#125;</span></span><br><span class="line">a.c.call() <span class="comment">// Window (如果在严格模式下，会报错)</span></span><br></pre></td></tr></table></figure>
<p>还需要注意的是，箭头函数也没有 <code>arguments</code> 对象，该对象在函数体内不存在。为此，引入了一个 <code>...</code> （Rest 和 Spread）操作符，你可以使用这个操作符来代替获取 arguments：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> fn2 = () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn3 = (...arg) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// [1, 2]</span></span><br><span class="line">fn2(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// ReferenceError: arguments is not defined</span></span><br><span class="line">fn3(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure>
<p>在解构的语法中，也可以使用 <code>…</code> 操作符：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [opt1, ...opts] = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(opt1) <span class="comment">// 'one'</span></span><br><span class="line"><span class="built_in">console</span>.log(opts) <span class="comment">// ['two', 'three', 'four']</span></span><br></pre></td></tr></table></figure>
<h2 id="类-Classes"><a href="#类-Classes" class="headerlink" title="类 (Classes)"></a>类 (Classes)</h2><p>ES6 引入的 Classes 类定义其实是一个语法糖（Syntactic sugar），是用来简化编写构造函数的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">p.toString() <span class="comment">// "(1, 2)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法和 ES5 的构造函数一致</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">p.toString() <span class="comment">// "(1, 2)"</span></span><br></pre></td></tr></table></figure>
<p>其中 ES6 还提供了静态变量的定义方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> get name () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Jason'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.name <span class="comment">// "Jason"</span></span><br></pre></td></tr></table></figure>
<h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>根据阮一峰的说法：</p>
<blockquote>
<p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。它是JavaScript语言的第七种数据类型，前六种是：Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p>
</blockquote>
<p><code>Symbol</code> 是一种原始数据类型，并且表示的是独一无二的值。</p>
<p>具体详细细节大家可以去看阮一峰的 ECMAScript 6 入门，我在这只记录一下作为对象属性名的用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;</span><br><span class="line">a[b] = <span class="string">'name'</span></span><br><span class="line">a[b] <span class="comment">// "name"</span></span><br></pre></td></tr></table></figure>
<p>注意，Symbol值作为对象属性名时，不能用点运算符。而且，在对象的内部，使用Symbol值定义属性时，Symbol值必须放在方括号之中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [s]: <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[s](<span class="number">123</span>) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>
<p>好了，ES6 的笔记暂时这么多。</p>

      
    </div>
    
  </div>
  
    
<nav id="article-nav">
  
  
    <a href="/2016/06/16/saving-single-dog-develope-and-remark/" id="article-nav-older" class="article-nav-link-wrap">
      <div class="article-nav-title">深大快讯照片墙开发思考</div>
      <strong class="article-nav-caption">></strong>
    </a>
  
</nav>

  
</article>




</div>
      <footer id="footer">
  <div class="outer">
    <div id="footer-info">
    	<div class="footer-left">
    		Copyright &copy; 2016 Jason's Blog - ijason.cc
        <a href="http://www.miibeian.gov.cn/">粤ICP备14094574号</a>
    	</div>
      	<div class="footer-right">
      		<a href="http://hexo.io/" target="_blank">Hexo</a>  Theme <a href="https://github.com/litten/hexo-theme-yilia" target="_blank">Yilia</a> by Litten
      	</div>
    </div>
  </div>
</footer>
    </div>
    
  <link rel="stylesheet" href="/fancybox/jquery.fancybox.css">


<script>
	var yiliaConfig = {
		fancybox: true,
		mathjax: true,
		animate: true,
		isHome: false,
		isPost: true,
		isArchive: false,
		isTag: false,
		isCategory: false,
		open_in_new: false
	}
</script>
<script src="http://7.url.cn/edu/jslib/comb/require-2.1.6,jquery-1.9.1.min.js"></script>
<script src="/js/main.js"></script>






<script type="text/x-mathjax-config">
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"]  ],
        processEscapes: true,
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
    }
});

MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i=0; i < all.length; i += 1) {
        all[i].SourceElement().parentNode.className += ' has-jax';                 
    }       
});
</script>

<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>


  </div>
</body>
</html>